/**
 * For anything you want to hide on page load when JS is enabled, so
 * that you can use the JS to control visibility and avoid flicker.
 */
 .js .js-hide {
  display: none;
}

/**
 * For anything you want to show on page load only when JS is enabled.
 */
.js-show {
  display: none;
}
.js .js-show {
  display: block;
}


/**
 * Hide elements from all users.
 *
 * Used for elements which should not be immediately displayed to any user. An
 * example would be collapsible details that will be expanded with a click
 * from a user. The effect of this class can be toggled with the jQuery show()
 * and hide() functions.
 */
 .hidden {
  display: none;
}

/**
 * Hide elements visually, but keep them available for screen readers.
 *
 * Used for information required for screen reader users to understand and use
 * the site where visual display is undesirable. Information provided in this
 * manner should be kept concise, to avoid unnecessary burden on the user.
 * "!important" is used to prevent unintentional overrides.
 */
.visually-hidden {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
  width: 1px;
  word-wrap: normal;
}

/**
 * The .focusable class extends the .visually-hidden class to allow
 * the element to be focusable when navigated to via the keyboard.
 */
.visually-hidden.focusable:active,
.visually-hidden.focusable:focus {
  position: static !important;
  clip: auto;
  overflow: visible;
  height: auto;
  width: auto;
}

/**
 * Hide visually and from screen readers, but maintain layout.
 */
.invisible {
  visibility: hidden;
}


.nowrap {
  white-space: nowrap;
}

.position-container {
  position: relative;
}

.reset-appearance {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border: 0 none;
  background: transparent;
  padding: 0;
  margin: 0;
  line-height: inherit;
}


@media (min-width: 767px) {

  .region-primary-menu{
    display: inline-block;
    float: right;
    width: auto;
    margin: 0;
  }

  .region-primary-menu,
  .menu-base-theme li a{
    background: none;
  }

  .menu-base-theme a{
    border: 0;
  }

  .menu-base-theme > li{
    border: 0;
  }

  .menu-base-theme a span.sub-arrow {
    padding: 0;
    top: 23px;
    margin-top: 0;
    bottom: 2px;
    right: 5px;
    margin-left: -5px;
    left: auto;
    width: 0;
    height: 0;
    border-width: 5px;
    border-style: solid dashed dashed dashed;
    border-color: #fff transparent transparent transparent;
    background: transparent;
  }

  .menu-base-theme ul {
    border: 1px solid #a8a8a8;
    padding: 0;
    background-color: #fff;
    background: rgba(255, 255, 255, 0.74);
  }

  .menu-base-theme ul.has-submenu li {
    border-bottom: 1px solid #fff;
  }

  .welcome-banner-text h2{
    font-size: 50px;
  }

  .welcome-banner-text{
    font-size: 14px;
  }

  .bottom-widgets{
    text-align: left;
    padding: 50px 0;
  }

  .footerwidget{
    padding: 50px 0;
  }

  .credit-link{
    text-align: right;
  }

  .social-media{
    float: right;
  }

  .social-media a{
    margin: 0 0 0 10px;
  }

  /*comment*/

  .comment-wrap .author-details{ width: 10%; }

  .comment-wrap .author-comments{ width: 90%;}
}

.clearfix:after {
  content: "";
  display: table;
  clear: both;
}

.text-align-left {
  text-align: left;
}
.text-align-right {
  text-align: right;
}
.text-align-center {
  text-align: center;
}
.text-align-justify {
  text-align: justify;
}

/**
  * Alignment classes for block level elements (images, videos, blockquotes, etc.)
  */
.align-left {
  float: left;
}
.align-right {
  float: right;
}
.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.container-inline div,
.container-inline label {
  display: inline;
}
/* Details contents always need to be rendered as block. */
.container-inline .details-wrapper {
  display: block;
}